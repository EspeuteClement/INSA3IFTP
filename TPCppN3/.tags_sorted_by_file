!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
a) aWrite	makedep.lua	/^			string.gsub(line,"#include \\"(.-)\\"", function(a) aWrite(a,file) end);$/;"	f
aWrite	makedep.lua	/^function aWrite(a,file)$/;"	f
file_exists	makedep.lua	/^function file_exists(name)$/;"	f
string.gsub(v,"(.-).cpp",function(a) fileName 	makedep.lua	/^	string.gsub(v,"(.-).cpp",function(a) fileName = a end)$/;"	f
ADDITIONAL_CLEAN	makefile	/^ADDITIONAL_CLEAN = core $(OBJS) $(EXEC)$/;"	m
BOLD	makefile	/^BOLD = \\033[1m$/;"	m
CC	makefile	/^CC = g++$/;"	m
CC_COMP_FLAG	makefile	/^CC_COMP_FLAG = -c -std=c++11 -Wall -g$/;"	m
CC_OUTPUT_FLAG	makefile	/^CC_OUTPUT_FLAG = -o$/;"	m
CLEAN	makefile	/^CLEAN = clean$/;"	m
CLEAN_COMMAND	makefile	/^CLEAN_COMMAND = rm$/;"	m
CLEAN_FLAG	makefile	/^CLEAN_FLAG = -f$/;"	m
DEBUG	makefile	/^DEBUG = debug$/;"	m
DEP_CMD	makefile	/^DEP_CMD = lua makedep.lua $(SRC)$/;"	m
DEP_FILE	makefile	/^DEP_FILE = dep\/dependencies.dep$/;"	m
DEP_TARGET	makefile	/^DEP_TARGET = dep$/;"	m
DOCTARGET	makefile	/^DOCTARGET = doc$/;"	m
DOC_COMMAND	makefile	/^DOC_COMMAND = doxygen .\/docConfig && ln -s -f doc\/html\/index.html "open doc.html"$/;"	m
EXEC	makefile	/^EXEC = out\/executable.out$/;"	m
EXEC_FOLDER	makefile	/^EXEC_FOLDER = bin\/$/;"	m
LINK	makefile	/^LINK = g++$/;"	m
LINK_FLAG	makefile	/^LINK_FLAG = -lboost_regex$/;"	m
OBJS	makefile	/^OBJS = $(subst .cpp,.o,$(addprefix $(OBJS_FOLDER),$(SRC)))$/;"	m
OBJS_FOLDER	makefile	/^OBJS_FOLDER = build\/$/;"	m
PRINT	makefile	/^PRINT = @printf$/;"	m
RESET_BOLD	makefile	/^RESET_BOLD = \\033[21m$/;"	m
RUN	makefile	/^RUN = run$/;"	m
RUNSAVE_FILE	makefile	/^RUNSAVE_FILE = ..\/utils\/dispTree\/data.lua$/;"	m
RUN_AND_SAVE	makefile	/^RUN_AND_SAVE = runSave$/;"	m
SRC	makefile	/^SRC = MoteurES.cpp Main.cpp Site.cpp Fichier.cpp$/;"	m
SRC_FOLDER	makefile	/^SRC_FOLDER =  src\/$/;"	m
switchVisibility	rendu/shemaClasses.class.violet.html	/^	function switchVisibility() {$/;"	f
main	scrap/entreSortieTest.cpp	/^int main(int nombreArguments, char* arguments[])$/;"	f
main	scrap/testRegex.cpp	/^int main()$/;"	f
AjouterVisite	src/Fichier.cpp	/^void Fichier::AjouterVisite (Fichier * fichierSource)$/;"	f	class:Fichier
FaireGraphe	src/Fichier.cpp	/^void Fichier::FaireGraphe (ofstream &theStream)$/;"	f	class:Fichier
Fichier	src/Fichier.cpp	/^Fichier::Fichier (const string unChemin)$/;"	f	class:Fichier
GetChemin	src/Fichier.cpp	/^string Fichier::GetChemin () const$/;"	f	class:Fichier
GetHits	src/Fichier.cpp	/^uint32_t Fichier::GetHits () const$/;"	f	class:Fichier
~Fichier	src/Fichier.cpp	/^Fichier::~Fichier ()$/;"	f	class:Fichier
DEBUG	src/Fichier.h	11;"	d
FI	src/Fichier.h	/^    typedef map<Fichier *, uint32_t> :: iterator FI;$/;"	t	class:Fichier
FICHIER_H	src/Fichier.h	10;"	d
Fichier	src/Fichier.h	/^class Fichier$/;"	c
HitMap	src/Fichier.h	/^    typedef map<Fichier *, uint32_t> HitMap;$/;"	t	class:Fichier
PlusPetitNbHits	src/Fichier.h	/^    static bool PlusPetitNbHits (const Fichier* fichier1, const Fichier* fichier2)$/;"	f	class:Fichier
chemin	src/Fichier.h	/^    string chemin;$/;"	m	class:Fichier
hits	src/Fichier.h	/^    HitMap hits;$/;"	m	class:Fichier
totalHits	src/Fichier.h	/^    uint32_t totalHits;$/;"	m	class:Fichier
main	src/Main.cpp	/^int main(int nombreArguments, char* arguments[])$/;"	f
AfficherAide	src/MoteurES.cpp	/^void MoteurES::AfficherAide()$/;"	f	class:MoteurES
FaireGraphe	src/MoteurES.cpp	/^void MoteurES::FaireGraphe()$/;"	f	class:MoteurES
FermerFichierLog	src/MoteurES.cpp	/^CodeRetourMoteurES MoteurES::FermerFichierLog()$/;"	f	class:MoteurES
GestionArguments	src/MoteurES.cpp	/^CodeRetourArgument MoteurES::GestionArguments(int nombreArguments, char* arguments[])$/;"	f	class:MoteurES
LireLigneLog	src/MoteurES.cpp	/^DonneesLog MoteurES::LireLigneLog()$/;"	f	class:MoteurES
ModifierMatchs	src/MoteurES.cpp	/^void MoteurES::ModifierMatchs(int heure)$/;"	f	class:MoteurES
MoteurES	src/MoteurES.cpp	/^MoteurES::MoteurES()$/;"	f	class:MoteurES
OuvrirFichierLog	src/MoteurES.cpp	/^CodeRetourMoteurES MoteurES::OuvrirFichierLog(string chemin)$/;"	f	class:MoteurES
ParserLog	src/MoteurES.cpp	/^void MoteurES::ParserLog()$/;"	f	class:MoteurES
~MoteurES	src/MoteurES.cpp	/^MoteurES::~MoteurES ()$/;"	f	class:MoteurES
AIDE_ARG	src/MoteurES.h	/^    AIDE_ARG        \/\/ L’utilisateur à demandé l'affichage de l'aide.$/;"	e	enum:CodeRetourArgument
CodeHttp	src/MoteurES.h	/^        unsigned int CodeHttp;  \/* Le code http correspondant à la *\/$/;"	m	struct:DonneesLog
CodeRetourArgument	src/MoteurES.h	/^enum CodeRetourArgument$/;"	g
CodeRetourMoteurES	src/MoteurES.h	/^enum CodeRetourMoteurES$/;"	g
DEBUG	src/MoteurES.h	11;"	d
DonneesLog	src/MoteurES.h	/^        DonneesLog( string FichierDestination,$/;"	f	struct:DonneesLog
DonneesLog	src/MoteurES.h	/^struct DonneesLog{$/;"	s
END_FILE	src/MoteurES.h	/^    END_FILE    \/\/ Si on est arrivé à la fin du fichier$/;"	e	enum:EtatDonneesLog
ERR_ARG	src/MoteurES.h	/^    ERR_ARG,        \/\/ Les arguments sont mal formés$/;"	e	enum:CodeRetourArgument
Etat	src/MoteurES.h	/^        EtatDonneesLog Etat;    \/* L'état des données lues*\/$/;"	m	struct:DonneesLog
EtatDonneesLog	src/MoteurES.h	/^enum EtatDonneesLog$/;"	g
FICHIER_ERR	src/MoteurES.h	/^    FICHIER_ERR = 1 \/\/ L'ouverture du fichier à échouée.$/;"	e	enum:CodeRetourMoteurES
FICHIER_OK	src/MoteurES.h	/^    FICHIER_OK = 0, \/\/ L'ouverture du fichier à bien eu lieu$/;"	e	enum:CodeRetourMoteurES
FichierDestination	src/MoteurES.h	/^        string FichierDestination; \/* Le Fichier vers où l'on va *\/$/;"	m	struct:DonneesLog
FichierEstOuvert	src/MoteurES.h	/^    inline bool FichierEstOuvert() const {return fichierLog.is_open();} ;$/;"	f	class:MoteurES
FichierSource	src/MoteurES.h	/^        string FichierSource;      \/* Le Fichier d'où l'on vient *\/$/;"	m	struct:DonneesLog
FinDuFichier	src/MoteurES.h	/^        inline bool FinDuFichier() const {return Etat == END_FILE;};$/;"	f	struct:DonneesLog
MOTEURES_H	src/MoteurES.h	10;"	d
MoteurES	src/MoteurES.h	/^class MoteurES$/;"	c
NB_PREMIERS	src/MoteurES.h	/^const uint32_t NB_PREMIERS = 10;$/;"	v
NON_MATCH	src/MoteurES.h	/^    NON_MATCH,   \/\/ Si la lecture n'a pas donné de résultat (Parce que ignoré)$/;"	e	enum:EtatDonneesLog
OK	src/MoteurES.h	/^    OK,         \/\/ Si la lecture s'est déroulée sans accrocs$/;"	e	enum:EtatDonneesLog
OK_ARG	src/MoteurES.h	/^    OK_ARG,         \/\/ Tout c'est bien passé$/;"	e	enum:CodeRetourArgument
Protocole	src/MoteurES.h	/^        string Protocole;       \/* Le protocole qui à été utilisé pour la requête*\/$/;"	m	struct:DonneesLog
SiteSource	src/MoteurES.h	/^        string SiteSource;      \/* *\/$/;"	m	struct:DonneesLog
afficher10	src/MoteurES.h	/^    bool afficher10 = true;$/;"	m	class:MoteurES
afficherSiteExternes	src/MoteurES.h	/^    bool afficherSiteExternes = false;$/;"	m	class:MoteurES
apacheLogRegex	src/MoteurES.h	/^    regex apacheLogRegex;$/;"	m	class:MoteurES
blackListExtension	src/MoteurES.h	/^    vector<string> blackListExtension; \/*La liste des extensions de fichiers ignorée*\/$/;"	m	class:MoteurES
fichierLog	src/MoteurES.h	/^    ifstream fichierLog; \/**Le fichier de log que l'on lit*\/$/;"	m	class:MoteurES
leSite	src/MoteurES.h	/^    Site *leSite = NULL;$/;"	m	class:MoteurES
leSiteNom	src/MoteurES.h	/^    string leSiteNom = "intranet-if.insa-lyon.fr";$/;"	m	class:MoteurES
nomFichierSortie	src/MoteurES.h	/^    string nomFichierSortie = "";$/;"	m	class:MoteurES
verbose	src/MoteurES.h	/^    bool verbose = false; \/* Si l'on doit afficher chaque information lue dans le ficher log *\/$/;"	m	class:MoteurES
AfficherPremiers	src/Site.cpp	/^void Site::AfficherPremiers (uint32_t nbPremiers)$/;"	f	class:Site
AjouterFichier	src/Site.cpp	/^void Site::AjouterFichier(const string chemin)$/;"	f	class:Site
AjouterVisite	src/Site.cpp	/^void Site::AjouterVisite (const string cheminDestination)$/;"	f	class:Site
AjouterVisite	src/Site.cpp	/^void Site::AjouterVisite (const string cheminSource, const string cheminDestination)$/;"	f	class:Site
FaireGraphe	src/Site.cpp	/^void Site::FaireGraphe (ofstream &theStream)$/;"	f	class:Site
GetAdresse	src/Site.cpp	/^string Site::GetAdresse () const$/;"	f	class:Site
Site	src/Site.cpp	/^Site::Site (const string uneAdresse)$/;"	f	class:Site
~Site	src/Site.cpp	/^Site::~Site ()$/;"	f	class:Site
CHEMIN_FICHIER_EXTERNE	src/Site.h	/^const string CHEMIN_FICHIER_EXTERNE = "Externe";$/;"	v
DEBUG	src/Site.h	11;"	d
FichierMap	src/Site.h	/^    typedef map<string, Fichier*> FichierMap;$/;"	t	class:Site
SI	src/Site.h	/^    typedef map<string, Fichier*> :: iterator SI;$/;"	t	class:Site
SITE_H	src/Site.h	10;"	d
Site	src/Site.h	/^class Site$/;"	c
adresse	src/Site.h	/^    string adresse;$/;"	m	class:Site
fichiers	src/Site.h	/^    FichierMap fichiers;$/;"	m	class:Site
