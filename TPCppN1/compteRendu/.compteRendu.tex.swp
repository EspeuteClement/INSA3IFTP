\documentclass[11pt]{article}

\usepackage{custom}

\title{Compte-Rendu TP C++ \#1}
\author{{\sc Renault} Benoit, {\sc Espeute} Clément}
\date{14 septembre 2015}

\usepackage{listings}


\definecolor{commentColor}{rgb}{0.7,0.7,0.7}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\lstset{language=bash} 
\lstset{ %
  backgroundcolor=\color{black!5},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize\ttfamily,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{commentColor},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,	                   % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  %language=Octave,                 % the language of the code
  otherkeywords={*,...},            % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black!20},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname,                   % show the filename of files included with \lstinputlisting; also try caption instead of title
  postbreak=\raisebox{0ex}[0ex][0ex]{\tt\color{red}-> }
}


\begin{document}
\pagestyle{fancy}
\maketitle

\section{Spécifications de la classe <Collection>}

\subsection{Présentation générale}
	<Collection> a pour rôle de gérer le stockage, la modification et l'affichage d'un ensemble de \emph{nombres entiers}. Le stockage est réalisé dans un tableau d'entiers (int) géré de façon dynamique simple. Le cahier des charges ne l'exigeant pas, les redondances sont acceptées et les valeurs ne sont pas triées.

\subsection{Présentation des méthodes}

\subsubsection*{Constructeur n°1}

Paramètres : un entier représentant la taille (maximale) du tableau.

\noindent Effets : Allocation dynamique du tableau en fonction de la taille max.

\subsubsection*{Constructeur n°2}
Paramètres : 
Un pointeur vers un tableau d’entiers quelconque. 
Un entier représentant le nombre d’éléments du tableau (part du contrat : il est à la charge de l’utilisateur de donne une taille juste).

\noindent Effets : Allocation dynamique du tableau en fonction de la taille max.

\subsubsection*{Méthode Afficher}
Paramètres : Aucun.

\noindent Sortie : Les éléments dans l’ordre d’apparition dans le tableau, avec un retour chariot entre chaque élément sur la sortie standard. Si en mode de déboguage, affiche le nombre d’éléments et la taille allouee à la fin de l’affichage des éléments.

\subsubsection*{Méthode Ajouter}
Paramètre : Un nombre entier fournit par l’utilisateur.
Effets

\noindent Note : La réallocation de la mémoire si la taille max est atteinte est prise en charge par la méthode.

\subsubsection*{Méthode Retirer}
Paramètres : Un entier représentant la (les) valeurs à supprimer, un entier représentant le nombre d'occurrences de la valeur que l’on souhaite retirer et s’il est négatif, on supprime toutes les occurrences.
\noindent Effets : Tout les éléments dont la valeur correspond à celle en entrée sont supprimés.

\noindent Note : Décaler tous les éléments dans le tableau pour que celui ci soit le plus compact possible.

\subsubsection*{Méthode Ajuster}
Paramètres : Un entier représentant la nouvel le taille du tableau.

\noindent Effet : Modification de la taille max du tableau et réallocation dynamique de celui-ci.

\noindent Note : Refus de redimension si il y a plus d’éléments que la taille max demandée. Code de retour : “La collection ne peut pas être tronquée !”
    
\subsubsection*{Méthode Reunir}
Paramètres : Une collection à concaténer avec la courante.
\noindent Sortie : Un nouveau tableau contenant les collections bout à bout.

\subsubsection*{Méthode Destructeur}
\noindent Effets : Désallocation du tableau.

\section{Les tests}
Afin de vérifier que chaque méthode  notre classe fonctionne, on réalise des tests unitaires sur chacune d'entre elles. La méthode Afficher à été modifiée pour pouvoir donner la taille allouée du tableau et le nombre d'éléments a l'intérieur de celui-ci. Cet affichage peut être désactivé en enlevant le \texttt{\#define DEBUG} à l'intérieur de \texttt{Collection.h}.

\subsection{Test pour \tt Retirer}
Les tests de la méthode retirer sont basés 

\end{document}